stages:
  # ---------------------------------------------------------------------
  prepare_split:
    cmd: python -m src.data.prepare_split
    deps:
      - src/data/prepare_split.py
    outs:
      - data/cifar_split.npz
    params:
      - seed
      - split.train_percent
      - split.test_percent

  # ---------------------------------------------------------------------
  train_baseline:
    cmd: python -m experiments.train_baseline
    deps:
      - experiments/train_baseline.py
      - data/cifar_split.npz
    outs:
      - checkpoints/baseline_model.pt
    params:
      - baseline.train.epochs
      - baseline.train.learning_rate
      - model.num_classes
      - model.latent_channels
      - model.pretrained

  # ---------------------------------------------------------------------
  # Unified pool-block pre-training (AE or VAE)
  pretrain_pool:
    foreach:
      - ae
      - vae
    do:
      cmd: >-
        python -m pretrain.pretrain_pool_encoder
        --pool_type ${item}
      deps:
        - pretrain/pretrain_pool_encoder.py
        - src/models/ae.py
        - src/models/vae.py
        - data/cifar_split.npz
      outs:
        - checkpoints/${item}_pretrained.pth
      params:
        - ${item}.pretrain.epochs
        - ${item}.pretrain.learning_rate
        - model.latent_channels
        - model.pretrained
        # item-specific extras (ignored when not present)
        - ae.recon_loss_weight
        - vae.hidden_ch
        - vae.latent_ch
        - vae.beta

  # ---------------------------------------------------------------------
  # Classifier training on top of the pretrained pool block
  train_with_pool:
    foreach:
      - { name: ae_frozen,   pool: ae,  freeze: true  }
      - { name: ae_unfrozen, pool: ae,  freeze: false }
      - { name: vae_frozen,  pool: vae, freeze: true  }
      - { name: vae_unfrozen,pool: vae, freeze: false }
    do:
      cmd: >-
        python -m experiments.train_resnet_with_pool
        --pool_type ${item.pool}
        --freeze_encoder ${item.freeze}
      deps:
        - experiments/train_resnet_with_pool.py
        - data/cifar_split.npz
        - checkpoints/${item.pool}_pretrained.pth
      outs:
        - checkpoints/${item.name}_model.pt
      params:
        - ${item.pool}.train.epochs
        - ${item.pool}.train.learning_rate
        - model.latent_channels
        - model.num_classes
        - model.pretrained

  # ---------------------------------------------------------------------
  evaluate:
    foreach:
      - baseline
      - ae_frozen
      - ae_unfrozen
      - vae_frozen
      - vae_unfrozen
    do:
      cmd: python -m experiments.evaluate --model_type ${item}
      deps:
        - experiments/evaluate.py
        - checkpoints/${item}_model.pt
        - data/cifar_split.npz
      outs:
        - results/${item}_acc.json
      params:
        - model.latent_channels
        - model.num_classes
